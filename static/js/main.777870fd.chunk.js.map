{"version":3,"sources":["App.js","example.mp4","reportWebVitals.js","index.js"],"names":["geolocation","setLocation","sendRequest","a","requestOptions","method","url","params","coords","latitude","longitude","axios","request","App","useState","getData","navigator","getCurrentPosition","pos","console","log","useEffect","videoParentRef","useRef","shouldUseImage","setShouldUseImage","ua","userAgent","toLowerCase","indexOf","isSafari","current","player","children","controls","playsinline","muted","setAttribute","autoplay","setTimeout","promise","play","then","catch","style","display","className","src","mainVideo","alt","ref","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAKIA,EAAaC,E,wFCLF,MAA0B,oC,ODMnCC,EAAW,uCAAG,4BAAAC,EAAA,6DACVC,EAAiB,CACnBC,OAAQ,MACRC,IANI,0CAOJC,OAAQ,CACJ,SAAYP,EAAYQ,OAASR,EAAYQ,OAAOC,SAAU,GAC9D,UAAaT,EAAYQ,OAASR,EAAYQ,OAAOE,UAAW,KANxD,SASVC,IAAMC,QAAQR,GATJ,2CAAH,qDA0FFS,MA3Ef,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACVd,EADU,KACGC,EADH,KAEX,IAAMc,EAAO,uCAAG,sBAAAZ,EAAA,sEACND,IADM,OAEZc,UAAUhB,YAAYiB,mBAAtB,uCAAyC,WAAOC,GAAP,SAAAf,EAAA,6DACrCgB,QAAQC,IAAIF,GACZjB,EAAYiB,GAFyB,SAG/BhB,IAH+B,2CAAzC,uDAFY,2CAAH,qDASbmB,qBAAW,WACPN,MACD,IAEH,IAAMO,EAAiBC,mBACvB,EAA4CT,oBAAS,GAArD,mBAAOU,EAAP,KAAuBC,EAAvB,KAoCA,OAnCAJ,qBAAU,WAEN,GAvBS,WACb,IAAMK,EAAKV,UAAUW,UAAUC,cAC/B,OAAOF,EAAGG,QAAQ,WAAa,GAAKH,EAAGG,QAAQ,UAAY,EAqBnDC,IAAcR,EAAeS,QAAS,CAEtC,IAAMC,EAASV,EAAeS,QAAQE,SAAS,GAG3CD,IAGAA,EAAOE,UAAW,EAClBF,EAAOG,aAAc,EACrBH,EAAOI,OAAQ,EACfJ,EAAOK,aAAa,QAAS,IAC7BL,EAAOM,UAAW,EAGlBC,YAAW,WAEP,IAAMC,EAAUR,EAAOS,OAEnBD,EAAQE,MACRF,EACKE,MAAK,eACLC,OAAM,WAEHrB,EAAeS,QAAQa,MAAMC,QAAU,OACvCpB,GAAkB,QAG/B,OAGZ,IAEID,EACH,qBAAKsB,UAAU,eAAf,SACA,qBAAKC,IAAKC,EAAWC,IAAI,kBAGzB,qBAAKH,UAAU,eACXI,IAAK5B,EACL6B,wBAAyB,CACrBC,OAAO,+JAAD,OAQCJ,EARD,+CErEPK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.777870fd.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport mainVideo from './example.mp4';\nconst url = \"https://alonschwartzblat.herokuapp.com/\";\n\nlet geolocation, setLocation;\nconst sendRequest = async()=>{\n    const requestOptions = {\n        method: \"GET\",\n        url: url,\n        params: {\n            'latitude': geolocation.coords ? geolocation.coords.latitude: \"\",\n            'longitude': geolocation.coords ? geolocation.coords.longitude: \"\"\n        }\n    }\n    await axios.request(requestOptions);\n}\nconst isSafari = () => {\n    const ua = navigator.userAgent.toLowerCase();\n    return ua.indexOf(\"safari\") > -1 && ua.indexOf(\"chrome\") < 0;\n};\nfunction App() {\n    [geolocation, setLocation] = useState(\"\");\n    const getData = async () => {\n        await sendRequest()\n        navigator.geolocation.getCurrentPosition(async (pos)=>{\n            console.log(pos);\n            setLocation(pos);\n            await sendRequest()\n        });\n    }\n\n    useEffect( () => {\n        getData()\n    }, [])\n\n    const videoParentRef = useRef();\n    const [shouldUseImage, setShouldUseImage] = useState(false);\n    useEffect(() => {\n        // check if user agent is safari and we have the ref to the container <div />\n        if (isSafari() && videoParentRef.current) {\n            // obtain reference to the video element\n            const player = videoParentRef.current.children[0];\n\n            // if the reference to video player has been obtained\n            if (player) {\n                // set the video attributes using javascript as per the\n                // webkit Policy\n                player.controls = false;\n                player.playsinline = true;\n                player.muted = true;\n                player.setAttribute(\"muted\", \"\"); // leave no stones unturned :)\n                player.autoplay = true;\n\n                // Let's wait for an event loop tick and be async.\n                setTimeout(() => {\n                    // player.play() might return a promise but it's not guaranteed crossbrowser.\n                    const promise = player.play();\n                    // let's play safe to ensure that if we do have a promise\n                    if (promise.then) {\n                        promise\n                            .then(() => {})\n                            .catch(() => {\n                                // if promise fails, hide the video and fallback to <img> tag\n                                videoParentRef.current.style.display = \"none\";\n                                setShouldUseImage(true);\n                            });\n                    }\n                }, 0);\n            }\n        }\n    }, []);\n\n    return shouldUseImage ? (\n        <div className=\"video_player\">\n        <img src={mainVideo} alt=\"Muted Video\" />\n        </div>\n    ) : (\n        <div className=\"video_player\"\n            ref={videoParentRef}\n            dangerouslySetInnerHTML={{\n                __html: `\n        <video\n          loop\n          muted\n          autoplay\n          playsinline\n          preload=\"metadata\"\n        >\n        <source src=\"${mainVideo}\" type=\"video/mp4\" />\n        </video>`\n            }}\n        />\n    );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/example.ecfa06be.mp4\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}